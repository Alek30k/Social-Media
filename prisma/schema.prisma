
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  surname                String?
  description            String?
  city                   String?
  school                 String?
  work                   String?
  website                String?
  createdAt              DateTime        @default(now())
  posts Post[]
  comments Comment[]
  likes Like[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
}

model Post {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  comments Comment[]
  likes   Like[]
}

model Comment {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
   postId String @db.ObjectId
   likes Like[]
}

model Like {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId String @db.ObjectId
   post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
   postId String @db.ObjectId
   Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String @db.ObjectId

}

model Follower {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  follower User @relation("UserFollowers",fields: [followerId], references: [id], onDelete: Cascade)
   followerId String @db.ObjectId
   following User @relation("UserFollowings",fields: [followingId], references: [id], onDelete: Cascade)
   followingId String @db.ObjectId
  
}

model FollowRequest {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String @db.ObjectId
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String @db.ObjectId

  @@unique([senderId, receiverId])
}

